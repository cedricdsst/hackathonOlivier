{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"logo.png\",\n  alt: \"\"\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LoginView = _resolveComponent(\"LoginView\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"nav\", null, [_hoisted_1, _createElementVNode(\"h3\", null, \"Welcome \" + _toDisplayString($options.getUserId()), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $data.showLogin = true)\n  }, \"Log In\"), $data.showLogin ? (_openBlock(), _createBlock(_component_LoginView, {\n    key: 0\n  })) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["_createElementVNode","src","alt","_createElementBlock","_hoisted_1","_toDisplayString","$options","getUserId","onClick","_cache","$event","$data","showLogin","_createBlock","_component_LoginView","key","_createCommentVNode"],"sources":["C:\\Users\\cedri\\Desktop\\nodejs\\chokbar\\frontend\\src\\components\\NavBar.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <nav>\r\n\r\n            <img src=\"logo.png\" alt=\"\">\r\n            <h3>Welcome {{ getUserId() }}</h3>\r\n        <button @click=\"showLogin = true\">Log In</button>\r\n        <LoginView v-if=\"showLogin\" />\r\n        </nav>\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { GET_USER_ID } from \"../store/storeconstants\";\r\nimport LoginView from './LoginView.vue'; // Ensure this path is correct\r\n\r\nexport default {\r\n    name: 'WelcomeView',\r\n    components: {\r\n        LoginView\r\n    },\r\n    data() {\r\n        return {\r\n            showLogin: false,\r\n        }\r\n    },\r\n    computed: {\r\n        userId() {\r\n            return this.$store.getters[`auth/${GET_USER_ID}`];\r\n        }\r\n    },\r\n    methods: {\r\n        getUserId() {\r\n            return this.userId;\r\n        }\r\n    },\r\n    watch: {\r\n        // Automatically hide the login form when authentication state changes\r\n        userId(newVal) {\r\n            if (newVal) {\r\n                this.showLogin = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n    nav {\r\n        width: 300px;\r\n        background-color: blueviolet;\r\n        height: 100%;\r\n    }\r\n</style>\r\n"],"mappings":";gCAIYA,mBAAA,CAA2B;EAAtBC,GAAG,EAAC,UAAU;EAACC,GAAG,EAAC;;;;uBAHhCC,mBAAA,CASM,cARFH,mBAAA,CAMM,cAJFI,UAA2B,EAC3BJ,mBAAA,CAAkC,YAA9B,UAAQ,GAAAK,gBAAA,CAAGC,QAAA,CAAAC,SAAS,oBAC5BP,mBAAA,CAAiD;IAAxCQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,KAAA,CAAAC,SAAS;KAAS,QAAM,GACvBD,KAAA,CAAAC,SAAS,I,cAA1BC,YAAA,CAA8BC,oBAAA;IAPtCC,GAAA;EAAA,MAAAC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}