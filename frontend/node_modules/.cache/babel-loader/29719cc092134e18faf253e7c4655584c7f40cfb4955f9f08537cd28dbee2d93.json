{"ast":null,"code":"import { SET_AUTHENTICATION, SET_AUTH_TOKEN, SET_USER_ID, SET_USERNAME, GET_USER_ID } from \"../store/storeconstants\";\nimport axios from 'axios'; // Import Axios for making HTTP requests\n\nexport default {\n  name: 'LoginView',\n  data() {\n    return {\n      input: {\n        email: \"\",\n        // Changed from username to email to match the API requirement\n        password: \"\"\n      }\n    };\n  },\n  methods: {\n    login() {\n      if (this.input.email !== \"\" && this.input.password !== \"\") {\n        axios.post('http://localhost:3000/api/auth/login', {\n          email: this.input.email,\n          password: this.input.password\n        }).then(response => {\n          this.$store.commit(`auth/${SET_USER_ID}`, response.data.userId);\n          this.$store.commit(`auth/${SET_USERNAME}`, response.data.username);\n          this.$store.commit(`auth/${SET_AUTH_TOKEN}`, response.data.token);\n          this.$store.commit(`auth/${SET_AUTHENTICATION}`, true);\n          console.log(\"Login successful\", response.data);\n          console.log(this.$store.getters[`auth/${GET_USER_ID}`]);\n          //console.log(this.$store.commit(`auth/${GET_USER_ID}`));\n          this.$emit('close-login');\n        }).catch(error => {\n          console.error(\"Login failed\", error.response ? error.response.data : 'Error without response');\n          this.$store.commit(SET_AUTHENTICATION, false);\n        });\n      } else {\n        console.log(\"Email and Password cannot be empty\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["SET_AUTHENTICATION","SET_AUTH_TOKEN","SET_USER_ID","SET_USERNAME","GET_USER_ID","axios","name","data","input","email","password","methods","login","post","then","response","$store","commit","userId","username","token","console","log","getters","$emit","catch","error"],"sources":["C:\\Users\\cedri\\Desktop\\nodejs\\chokbar\\frontend\\src\\components\\LoginView.vue"],"sourcesContent":["<template>\r\n    <div id=\"loginBg\">\r\n        <button @click=\"$emit('close-login')\">close</button>\r\n        <form name=\"login-form\">\r\n            <div class=\"mb-3 center\">\r\n\r\n                <input id=\"email\" class=\"logInputs\" type=\"email\" placeholder=\"Email\" v-model=\"input.email\" />\r\n            </div>\r\n            <br>\r\n            <div class=\"mb-3 center\">\r\n\r\n                <input id=\"password\" class=\"logInputs\" type=\"password\" placeholder=\"Password\"\r\n                    v-model=\"input.password\" />\r\n            </div>\r\n            <br>\r\n            <button class=\"btn btn-outline-dark\" type=\"submit\" v-on:click.prevent=\"login()\">\r\n                Login\r\n            </button>\r\n        </form>\r\n    </div>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nimport { SET_AUTHENTICATION, SET_AUTH_TOKEN, SET_USER_ID, SET_USERNAME, GET_USER_ID } from \"../store/storeconstants\";\r\nimport axios from 'axios'; // Import Axios for making HTTP requests\r\n\r\nexport default {\r\n    name: 'LoginView',\r\n    data() {\r\n        return {\r\n            input: {\r\n                email: \"\", // Changed from username to email to match the API requirement\r\n                password: \"\"\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        login() {\r\n            if (this.input.email !== \"\" && this.input.password !== \"\") {\r\n                axios.post('http://localhost:3000/api/auth/login', {\r\n                    email: this.input.email,\r\n                    password: this.input.password\r\n                })\r\n                    .then(response => {\r\n                        this.$store.commit(`auth/${SET_USER_ID}`, response.data.userId);\r\n                        this.$store.commit(`auth/${SET_USERNAME}`, response.data.username);\r\n                        this.$store.commit(`auth/${SET_AUTH_TOKEN}`, response.data.token);\r\n                        this.$store.commit(`auth/${SET_AUTHENTICATION}`, true);\r\n                        console.log(\"Login successful\", response.data);\r\n                        console.log(this.$store.getters[`auth/${GET_USER_ID}`]);\r\n                        //console.log(this.$store.commit(`auth/${GET_USER_ID}`));\r\n                        this.$emit('close-login');\r\n                    })\r\n                    .catch(error => {\r\n                        console.error(\"Login failed\", error.response ? error.response.data : 'Error without response');\r\n                        this.$store.commit(SET_AUTHENTICATION, false);\r\n                    });\r\n            } else {\r\n                console.log(\"Email and Password cannot be empty\");\r\n            }\r\n        }\r\n\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n#loginBg {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    background-color: rgba(0, 0, 0, 0.774);\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\nform {\r\n    width: 300px;\r\n    height: 450px;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    background-color: 15202B;\r\n    padding: 20px;\r\n}\r\n\r\n.center {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.logInputs {\r\n    background-color: #4d4d4d;\r\n    /* Dark background */\r\n    border: none;\r\n    /* No border */\r\n    border-radius: 15px;\r\n    /* Rounded corners */\r\n    color: white;\r\n    /* Light text */\r\n    font-family: Arial, sans-serif;\r\n    /* Font style */\r\n    font-size: 16px;\r\n    /* Text size */\r\n    padding: 10px 20px;\r\n    /* Padding inside the input */\r\n    width: 100%;\r\n    /* Full width */\r\n    box-sizing: border-box;\r\n    /* Includes padding in the width */\r\n}\r\n\r\n.logInputs::placeholder {\r\n    color: #575757;\r\n    /* Placeholder text color */\r\n    opacity: 1;\r\n    /* Full opacity for placeholder */\r\n}\r\n\r\n.logInputs:focus {\r\n    outline: none;\r\n    /* Removes the outline on focus */\r\n}\r\n</style>"],"mappings":"AAyBA,SAASA,kBAAkB,EAAEC,cAAc,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAU,QAAS,yBAAyB;AACpH,OAAOC,KAAI,MAAO,OAAO,EAAE;;AAE3B,eAAe;EACXC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE;QACHC,KAAK,EAAE,EAAE;QAAE;QACXC,QAAQ,EAAE;MACd;IACJ;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,KAAKA,CAAA,EAAG;MACJ,IAAI,IAAI,CAACJ,KAAK,CAACC,KAAI,KAAM,EAAC,IAAK,IAAI,CAACD,KAAK,CAACE,QAAO,KAAM,EAAE,EAAE;QACvDL,KAAK,CAACQ,IAAI,CAAC,sCAAsC,EAAE;UAC/CJ,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAK;UACvBC,QAAQ,EAAE,IAAI,CAACF,KAAK,CAACE;QACzB,CAAC,EACII,IAAI,CAACC,QAAO,IAAK;UACd,IAAI,CAACC,MAAM,CAACC,MAAM,CAAE,QAAOf,WAAY,EAAC,EAAEa,QAAQ,CAACR,IAAI,CAACW,MAAM,CAAC;UAC/D,IAAI,CAACF,MAAM,CAACC,MAAM,CAAE,QAAOd,YAAa,EAAC,EAAEY,QAAQ,CAACR,IAAI,CAACY,QAAQ,CAAC;UAClE,IAAI,CAACH,MAAM,CAACC,MAAM,CAAE,QAAOhB,cAAe,EAAC,EAAEc,QAAQ,CAACR,IAAI,CAACa,KAAK,CAAC;UACjE,IAAI,CAACJ,MAAM,CAACC,MAAM,CAAE,QAAOjB,kBAAmB,EAAC,EAAE,IAAI,CAAC;UACtDqB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,QAAQ,CAACR,IAAI,CAAC;UAC9Cc,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAACO,OAAO,CAAE,QAAOnB,WAAY,EAAC,CAAC,CAAC;UACvD;UACA,IAAI,CAACoB,KAAK,CAAC,aAAa,CAAC;QAC7B,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;UACZL,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACX,QAAO,GAAIW,KAAK,CAACX,QAAQ,CAACR,IAAG,GAAI,wBAAwB,CAAC;UAC9F,IAAI,CAACS,MAAM,CAACC,MAAM,CAACjB,kBAAkB,EAAE,KAAK,CAAC;QACjD,CAAC,CAAC;MACV,OAAO;QACHqB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACrD;IACJ;EAEJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}