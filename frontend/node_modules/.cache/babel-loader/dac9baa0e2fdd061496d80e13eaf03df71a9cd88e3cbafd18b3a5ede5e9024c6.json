{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { SET_AUTHENTICATION, SET_AUTH_TOKEN, SET_USER_ID, GET_USER_ID } from \"../store/storeconstants\";\nimport axios from 'axios'; // Import Axios for making HTTP requests\n\nexport default {\n  name: 'LoginView',\n  data() {\n    return {\n      input: {\n        email: \"\",\n        // Changed from username to email to match the API requirement\n        password: \"\"\n      }\n    };\n  },\n  methods: {\n    login() {\n      if (this.input.email !== \"\" && this.input.password !== \"\") {\n        axios.post('http://localhost:3000/api/auth/login', {\n          email: this.input.email,\n          password: this.input.password\n        }).then(response => {\n          this.$store.commit(`auth/${SET_USER_ID}`, response.data.userId);\n          this.$store.commit(`auth/${SET_AUTH_TOKEN}`, response.data.token);\n          this.$store.commit(`auth/${SET_AUTHENTICATION}`, true);\n          console.log(\"Login successful\", response.data);\n          console.log(this.$store.getters[`auth/${GET_USER_ID}`]);\n          //console.log(this.$store.commit(`auth/${GET_USER_ID}`));\n          this.$router.push('/home');\n        }).catch(error => {\n          console.error(\"Login failed\", error.response ? error.response.data : 'Error without response');\n          this.$store.commit(SET_AUTHENTICATION, false);\n        });\n      } else {\n        console.log(\"Email and Password cannot be empty\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["SET_AUTHENTICATION","SET_AUTH_TOKEN","SET_USER_ID","GET_USER_ID","axios","name","data","input","email","password","methods","login","post","then","response","$store","commit","userId","token","console","log","getters","$router","push","catch","error"],"sources":["C:\\Users\\cedri\\Desktop\\nodejs\\apiProject\\frontend\\src\\components\\LoginView.vue"],"sourcesContent":["<template>\r\n    <form name=\"login-form\">\r\n        <div class=\"mb-3\">\r\n            <label for=\"username\">Username: </label>\r\n            <br>\r\n            <input id=\"username\" type=\"text\" v-model=\"input.email\" />\r\n        </div>\r\n        <br>\r\n        <div class=\"mb-3\">\r\n            <label for=\"password\">Password: </label>\r\n            <br>\r\n            <input id=\"password\" type=\"password\" v-model=\"input.password\" />\r\n        </div>\r\n        <br>\r\n        <button class=\"btn btn-outline-dark\" type=\"submit\" v-on:click.prevent=\"login()\">\r\n            Login\r\n        </button>\r\n    </form>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nimport { SET_AUTHENTICATION, SET_AUTH_TOKEN, SET_USER_ID, GET_USER_ID } from \"../store/storeconstants\";\r\nimport axios from 'axios'; // Import Axios for making HTTP requests\r\n\r\nexport default {\r\n    name: 'LoginView',\r\n    data() {\r\n        return {\r\n            input: {\r\n                email: \"\", // Changed from username to email to match the API requirement\r\n                password: \"\"\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        login() {\r\n            if (this.input.email !== \"\" && this.input.password !== \"\") {\r\n                axios.post('http://localhost:3000/api/auth/login', {\r\n                    email: this.input.email,\r\n                    password: this.input.password\r\n                })\r\n                    .then(response => {\r\n                        this.$store.commit(`auth/${SET_USER_ID}`, response.data.userId);\r\n                        this.$store.commit(`auth/${SET_AUTH_TOKEN}`, response.data.token);\r\n                        this.$store.commit(`auth/${SET_AUTHENTICATION}`, true);\r\n                        console.log(\"Login successful\", response.data);\r\n                        console.log(this.$store.getters[`auth/${GET_USER_ID}`]);\r\n                        //console.log(this.$store.commit(`auth/${GET_USER_ID}`));\r\n                        this.$router.push('/home')\r\n                    })\r\n                    .catch(error => {\r\n                        console.error(\"Login failed\", error.response ? error.response.data : 'Error without response');\r\n                        this.$store.commit(SET_AUTHENTICATION, false);\r\n                    });\r\n            } else {\r\n                console.log(\"Email and Password cannot be empty\");\r\n            }\r\n        }\r\n\r\n    },\r\n}\r\n</script>"],"mappings":";AAuBA,SAASA,kBAAkB,EAAEC,cAAc,EAAEC,WAAW,EAAEC,WAAU,QAAS,yBAAyB;AACtG,OAAOC,KAAI,MAAO,OAAO,EAAE;;AAE3B,eAAe;EACXC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE;QACHC,KAAK,EAAE,EAAE;QAAE;QACXC,QAAQ,EAAE;MACd;IACJ;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,KAAKA,CAAA,EAAG;MACJ,IAAI,IAAI,CAACJ,KAAK,CAACC,KAAI,KAAM,EAAC,IAAK,IAAI,CAACD,KAAK,CAACE,QAAO,KAAM,EAAE,EAAE;QACvDL,KAAK,CAACQ,IAAI,CAAC,sCAAsC,EAAE;UAC/CJ,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAK;UACvBC,QAAQ,EAAE,IAAI,CAACF,KAAK,CAACE;QACzB,CAAC,EACII,IAAI,CAACC,QAAO,IAAK;UACd,IAAI,CAACC,MAAM,CAACC,MAAM,CAAE,QAAOd,WAAY,EAAC,EAAEY,QAAQ,CAACR,IAAI,CAACW,MAAM,CAAC;UAC/D,IAAI,CAACF,MAAM,CAACC,MAAM,CAAE,QAAOf,cAAe,EAAC,EAAEa,QAAQ,CAACR,IAAI,CAACY,KAAK,CAAC;UACjE,IAAI,CAACH,MAAM,CAACC,MAAM,CAAE,QAAOhB,kBAAmB,EAAC,EAAE,IAAI,CAAC;UACtDmB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,QAAQ,CAACR,IAAI,CAAC;UAC9Ca,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,MAAM,CAACM,OAAO,CAAE,QAAOlB,WAAY,EAAC,CAAC,CAAC;UACvD;UACA,IAAI,CAACmB,OAAO,CAACC,IAAI,CAAC,OAAO;QAC7B,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;UACZN,OAAO,CAACM,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACX,QAAO,GAAIW,KAAK,CAACX,QAAQ,CAACR,IAAG,GAAI,wBAAwB,CAAC;UAC9F,IAAI,CAACS,MAAM,CAACC,MAAM,CAAChB,kBAAkB,EAAE,KAAK,CAAC;QACjD,CAAC,CAAC;MACV,OAAO;QACHmB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACrD;IACJ;EAEJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}